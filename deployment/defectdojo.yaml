---
# Source: defectdojo/charts/rabbitmq/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: defectdojo-rabbitmq
  namespace: "defectdojo"
  labels:
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.13.3
    helm.sh/chart: rabbitmq-14.4.4
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: defectdojo
      app.kubernetes.io/name: rabbitmq
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow inbound connections to RabbitMQ
    - ports:
        - port: 4369
        - port: 5672
        - port: 5671
        - port: 25672
        - port: 15672
---
# Source: defectdojo/charts/rabbitmq/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: defectdojo-rabbitmq
  namespace: "defectdojo"
  labels:
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.13.3
    helm.sh/chart: rabbitmq-14.4.4
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: defectdojo
      app.kubernetes.io/name: rabbitmq
---
# Source: defectdojo/charts/rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: defectdojo-rabbitmq
  namespace: "defectdojo"
  labels:
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.13.3
    helm.sh/chart: rabbitmq-14.4.4
automountServiceAccountToken: false
secrets:
  - name: defectdojo-rabbitmq-specific
---
# Source: defectdojo/charts/rabbitmq/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: defectdojo-rabbitmq-config
  namespace: "defectdojo"
  labels:
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.13.3
    helm.sh/chart: rabbitmq-14.4.4
type: Opaque
data:
  rabbitmq.conf: |-
    IyMgVXNlcm5hbWUgYW5kIHBhc3N3b3JkCmRlZmF1bHRfdXNlciA9IHVzZXIKIyMgQ2x1c3RlcmluZwojIwpjbHVzdGVyX25hbWUgPSBkZWZlY3Rkb2pvLXJhYmJpdG1xCmNsdXN0ZXJfZm9ybWF0aW9uLnBlZXJfZGlzY292ZXJ5X2JhY2tlbmQgID0gcmFiYml0X3BlZXJfZGlzY292ZXJ5X2s4cwpjbHVzdGVyX2Zvcm1hdGlvbi5rOHMuaG9zdCA9IGt1YmVybmV0ZXMuZGVmYXVsdApjbHVzdGVyX2Zvcm1hdGlvbi5rOHMuYWRkcmVzc190eXBlID0gaG9zdG5hbWUKY2x1c3Rlcl9mb3JtYXRpb24uazhzLnNlcnZpY2VfbmFtZSA9IGRlZmVjdGRvam8tcmFiYml0bXEtaGVhZGxlc3MKY2x1c3Rlcl9mb3JtYXRpb24uazhzLmhvc3RuYW1lX3N1ZmZpeCA9IC5kZWZlY3Rkb2pvLXJhYmJpdG1xLWhlYWRsZXNzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwKY2x1c3Rlcl9mb3JtYXRpb24ubm9kZV9jbGVhbnVwLmludGVydmFsID0gMTAKY2x1c3Rlcl9mb3JtYXRpb24ubm9kZV9jbGVhbnVwLm9ubHlfbG9nX3dhcm5pbmcgPSB0cnVlCmNsdXN0ZXJfcGFydGl0aW9uX2hhbmRsaW5nID0gYXV0b2hlYWwKCiMgcXVldWUgbWFzdGVyIGxvY2F0b3IKcXVldWVfbWFzdGVyX2xvY2F0b3IgPSBtaW4tbWFzdGVycwojIGVuYWJsZSBsb29wYmFjayB1c2VyCmxvb3BiYWNrX3VzZXJzLnVzZXIgPSBmYWxzZQojZGVmYXVsdF92aG9zdCA9IGRlZmF1bHQtdmhvc3QKI2Rpc2tfZnJlZV9saW1pdC5hYnNvbHV0ZSA9IDUwTUIKIyMgUHJvbWV0aGV1cyBtZXRyaWNzCiMjCnByb21ldGhldXMudGNwLnBvcnQgPSA5NDE5CiMjIE1lbW9yeSBUaHJlc2hvbGQKIyMKdG90YWxfbWVtb3J5X2F2YWlsYWJsZV9vdmVycmlkZV92YWx1ZSA9IDUzNjg3MDkxMgp2bV9tZW1vcnlfaGlnaF93YXRlcm1hcmsucmVsYXRpdmUgPSAwLjUKIyMgVENQIExpc3RlbiBPcHRpb25zCiMjCnRjcF9saXN0ZW5fb3B0aW9ucy5iYWNrbG9nID0gMTI4CnRjcF9saXN0ZW5fb3B0aW9ucy5ub2RlbGF5ID0gdHJ1ZQp0Y3BfbGlzdGVuX29wdGlvbnMubGluZ2VyLm9uICAgICAgPSB0cnVlCnRjcF9saXN0ZW5fb3B0aW9ucy5saW5nZXIudGltZW91dCA9IDAKdGNwX2xpc3Rlbl9vcHRpb25zLmtlZXBhbGl2ZSA9IGZhbHNl
---
# Source: defectdojo/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: defectdojo
  labels:
    app.kubernetes.io/name: defectdojo
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: defectdojo-1.6.143
data:
  DD_ADMIN_USER: admin
  DD_ADMIN_MAIL: admin@defectdojo.local
  DD_ADMIN_FIRST_NAME: Admin
  DD_ADMIN_LAST_NAME: User
  DD_ALLOWED_HOSTS: defectdojo.default.minikube.local
  DD_SITE_URL: http://localhost:8080
  DD_CELERY_BROKER_SCHEME: amqp
  DD_CELERY_BROKER_USER: 'user'
  DD_CELERY_BROKER_HOST: defectdojo-rabbitmq
  DD_CELERY_BROKER_PORT: '5672'
  DD_CELERY_BROKER_PARAMS: ''
  DD_CELERY_BROKER_PATH: '//'
  DD_CELERY_LOG_LEVEL: INFO
  DD_CELERY_WORKER_POOL_TYPE: prefork
  DD_CELERY_WORKER_AUTOSCALE_MIN: '2'
  DD_CELERY_WORKER_AUTOSCALE_MAX: '8'
  DD_CELERY_WORKER_CONCURRENCY: '8'
  DD_CELERY_WORKER_PREFETCH_MULTIPLIER: '128'
  DD_DATABASE_ENGINE: django.db.backends.postgresql
  DD_DATABASE_HOST: c25b0a045c99.privatelink.postgres.database.azure.com
  DD_DATABASE_PORT: '5432'
  DD_DATABASE_USER: psqladmin
  DD_DATABASE_NAME: defectdojo
  DD_DATABASE_PASSWORD: 'Cir65!.2478'
  DD_INITIALIZE: 'true'
  DD_UWSGI_ENDPOINT: /run/defectdojo/uwsgi.sock
  DD_UWSGI_HOST: localhost
  DD_UWSGI_PASS: unix:///run/defectdojo/uwsgi.sock
  DD_UWSGI_NUM_OF_PROCESSES: '2'
  DD_UWSGI_NUM_OF_THREADS: '2'
  DD_UWSGI_MAX_FD: ''
  DD_DJANGO_METRICS_ENABLED: 'false'
  NGINX_METRICS_ENABLED: 'false'
  METRICS_HTTP_AUTH_USER: monitoring
---
# Source: defectdojo/templates/media-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    defectdojo.org/component: django
    app.kubernetes.io/name: defectdojo
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: defectdojo-1.6.143
  name: defectdojo-django-media
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---											  
# Source: defectdojo/charts/rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: defectdojo-rabbitmq-endpoint-reader
  namespace: "defectdojo"
  labels:
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.13.3
    helm.sh/chart: rabbitmq-14.4.4
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: defectdojo/charts/rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: defectdojo-rabbitmq-endpoint-reader
  namespace: "defectdojo"
  labels:
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.13.3
    helm.sh/chart: rabbitmq-14.4.4
subjects:
  - kind: ServiceAccount
    name: defectdojo-rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: defectdojo-rabbitmq-endpoint-reader
---
# Source: defectdojo/charts/rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: defectdojo-rabbitmq-headless
  namespace: "defectdojo"
  labels:
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.13.3
    helm.sh/chart: rabbitmq-14.4.4
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector:
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/name: rabbitmq
  publishNotReadyAddresses: true
---
# Source: defectdojo/charts/rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: defectdojo-rabbitmq
  namespace: "defectdojo"
  labels:
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.13.3
    helm.sh/chart: rabbitmq-14.4.4
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
      nodePort: null
    - name: epmd
      port: 4369
      targetPort: epmd
      nodePort: null
    - name: dist
      port: 25672
      targetPort: dist
      nodePort: null
    - name: http-stats
      port: 15672
      targetPort: stats
      nodePort: null
  selector:
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/name: rabbitmq
---
# Source: defectdojo/templates/django-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: defectdojo-django
  labels:
    defectdojo.org/component: django
    app.kubernetes.io/name: defectdojo
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: defectdojo-1.6.143
spec:
  selector:
    defectdojo.org/component: django
    app.kubernetes.io/name: defectdojo
    app.kubernetes.io/instance: defectdojo
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: http
---
# Source: defectdojo/templates/celery-beat-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: defectdojo-celery-beat
  labels:
    defectdojo.org/component: celery
    defectdojo.org/subcomponent: beat
    app.kubernetes.io/name: defectdojo
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: defectdojo-1.6.143
spec:
  replicas: 1
  selector:
    matchLabels:
      defectdojo.org/component: celery
      defectdojo.org/subcomponent: beat
      app.kubernetes.io/name: defectdojo
      app.kubernetes.io/instance: defectdojo
  template:
    metadata:
      labels:
        defectdojo.org/component: celery
        defectdojo.org/subcomponent: beat
        app.kubernetes.io/name: defectdojo
        app.kubernetes.io/instance: defectdojo
      annotations:
    spec:
      serviceAccountName: defectdojo
      volumes:
      - name: run
        emptyDir: {}
      containers:
      - command:
        - /entrypoint-celery-beat.sh
        name: celery
        image: "defectdojo/defectdojo-django:latest"
        imagePullPolicy: Always
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - name: run
          mountPath: /run/defectdojo
        envFrom:
        - configMapRef:
            name: defectdojo
        - secretRef:
            name: defectdojo-extrasecrets
            optional: true
        env:
        - name: DD_CELERY_BROKER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: defectdojo-rabbitmq-specific
              key: rabbitmq-password
        - name: DD_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: defectdojo
              key: DD_SECRET_KEY
        resources:
          limits:
            cpu: 2000m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
---
# Source: defectdojo/templates/celery-worker-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: defectdojo-celery-worker
  labels:
    defectdojo.org/component: celery
    defectdojo.org/subcomponent: worker
    app.kubernetes.io/name: defectdojo
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: defectdojo-1.6.143
spec:
  replicas: 1
  selector:
    matchLabels:
      defectdojo.org/component: celery
      defectdojo.org/subcomponent: worker
      app.kubernetes.io/name: defectdojo
      app.kubernetes.io/instance: defectdojo
  template:
    metadata:
      labels:
        defectdojo.org/component: celery
        defectdojo.org/subcomponent: worker
        app.kubernetes.io/name: defectdojo
        app.kubernetes.io/instance: defectdojo
      annotations:
    spec:
      serviceAccountName: defectdojo
      volumes:
      containers:
      - name: celery
        image: "defectdojo/defectdojo-django:latest"
        imagePullPolicy: Always
        securityContext:
          runAsUser: 1001
        command: ['/entrypoint-celery-worker.sh']
        volumeMounts:
        envFrom:
        - configMapRef:
            name: defectdojo
        - secretRef:
            name: defectdojo-extrasecrets
            optional: true
        env:
        - name: DD_CELERY_BROKER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: defectdojo-rabbitmq-specific
              key: rabbitmq-password
        - name: DD_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: defectdojo
              key: DD_SECRET_KEY
        resources:
          limits:
            cpu: 2000m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
---
# Source: defectdojo/templates/django-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: defectdojo-django
  labels:
    defectdojo.org/component: django
    app.kubernetes.io/name: defectdojo
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: defectdojo-1.6.143
spec:
  replicas: 1
  selector:
    matchLabels:
      defectdojo.org/component: django
      app.kubernetes.io/name: defectdojo
      app.kubernetes.io/instance: defectdojo
  template:
    metadata:
      labels:
        defectdojo.org/component: django
        app.kubernetes.io/name: defectdojo
        app.kubernetes.io/instance: defectdojo        
      annotations:
    spec:
      serviceAccountName: defectdojo
      securityContext:
        fsGroup: 1001
      volumes:
      - name: run
        emptyDir: {}
      - name: media
        persistentVolumeClaim:
          claimName: defectdojo-django-media
        
      containers:
      - name: uwsgi
        image: 'defectdojo/defectdojo-django:latest'
        imagePullPolicy: Always
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - name: run
          mountPath: /run/defectdojo
        - name: media
          mountPath: "/app/media"
        ports:
        - name: http-uwsgi
          protocol: TCP
          containerPort: 8081
        envFrom:
        - configMapRef:
            name: defectdojo
        - secretRef:
            name: defectdojo-extrasecrets
            optional: true
        env:
        - name: DD_CELERY_BROKER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: defectdojo-rabbitmq-specific
              key: rabbitmq-password
        - name: DD_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: defectdojo
              key: DD_SECRET_KEY
        - name: DD_CREDENTIAL_AES_256_KEY
          valueFrom:
            secretKeyRef:
              name: defectdojo
              key: DD_CREDENTIAL_AES_256_KEY
        - name: DD_SESSION_COOKIE_SECURE
          value: "True"
        - name: DD_CSRF_COOKIE_SECURE
          value: "True"
        livenessProbe:
          httpGet:
            path: /login?force_login_form&next=/
            port: http-uwsgi
            httpHeaders:
            - name: Host
              value: defectdojo.default.minikube.local
          failureThreshold: 6
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 2000m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
      - name: nginx
        image: 'defectdojo/defectdojo-nginx:latest'
        imagePullPolicy: Always
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - name: run
          mountPath: /run/defectdojo
        - name: media
          mountPath: /usr/share/nginx/html/media
        ports:
        - name: http
          protocol: TCP
          containerPort: 8080
        envFrom:
        - configMapRef:
            name: defectdojo
        env:
        - name: METRICS_HTTP_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: defectdojo
              key: METRICS_HTTP_AUTH_PASSWORD
        - name: USE_TLS
          value: 'false'
        - name: GENERATE_TLS_CERTIFICATE
          value: 'false'
        livenessProbe:
          httpGet:
            path: /nginx_health
            port: http
            httpHeaders:
            - name: Host
              value: defectdojo.default.minikube.local
          initialDelaySeconds: 10
          periodSeconds: 10
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /uwsgi_health
            port: http
            httpHeaders:
            - name: Host
              value: defectdojo.default.minikube.local
          failureThreshold: 6
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 2000m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
---
# Source: defectdojo/charts/rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: defectdojo-rabbitmq
  namespace: "defectdojo"
  labels:
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.13.3
    helm.sh/chart: rabbitmq-14.4.4
spec:
  serviceName: defectdojo-rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: defectdojo
      app.kubernetes.io/name: rabbitmq
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: defectdojo
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        app.kubernetes.io/version: 3.13.3
        helm.sh/chart: rabbitmq-14.4.4
      annotations:
        checksum/config: b4e56a7ccbc25f62470613fa9c7a19c5414421dd1fc3ff154307f6ebfddd3824
    spec:
      
      serviceAccountName: defectdojo-rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: defectdojo
                    app.kubernetes.io/name: rabbitmq
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      terminationGracePeriodSeconds: 120
      enableServiceLinks: true
      initContainers:
        - name: prepare-plugins-dir
          image: docker.io/bitnami/rabbitmq:3.13.3-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/liblog.sh

              info "Copying plugins dir to empty dir"
              # In order to not break the possibility of installing custom plugins, we need
              # to make the plugins directory writable, so we need to copy it to an empty dir volume
              cp -r --preserve=mode /opt/bitnami/rabbitmq/plugins/ /emptydir/app-plugins-dir
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.13.3-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d "false"
                    else
                        rabbitmqctl stop_app
                    fi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).defectdojo-rabbitmq-headless.$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/opt/bitnami/rabbitmq/.rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65535"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: defectdojo-rabbitmq-specific
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_DEFINITIONS_FILE
              value: "/app/load_definition.json"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "user"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: defectdojo-rabbitmq-specific
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap"
          envFrom:
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
            - name: metrics
              containerPort: 9419
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - sh
                - -ec
                - curl -f --user user:$RABBITMQ_PASSWORD 127.0.0.1:15672/api/health/checks/virtual-hosts
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 20
            exec:
              command:
                - sh
                - -ec
                - curl -f --user user:$RABBITMQ_PASSWORD 127.0.0.1:15672/api/health/checks/local-alarms
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/rabbitmq/etc/rabbitmq
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/rabbitmq/var/lib/rabbitmq
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/rabbitmq/.rabbitmq/
              subPath: app-erlang-cookie
            - name: empty-dir
              mountPath: /opt/bitnami/rabbitmq/var/log/rabbitmq
              subPath: app-logs-dir
            - name: empty-dir
              mountPath: /opt/bitnami/rabbitmq/plugins
              subPath: app-plugins-dir
            - name: data
              mountPath: /opt/bitnami/rabbitmq/.rabbitmq/mnesia
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: configuration
          projected:
            sources:
              - secret:
                  name: defectdojo-rabbitmq-config
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
        labels:
          app.kubernetes.io/instance: defectdojo
          app.kubernetes.io/name: rabbitmq
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
---
# Source: defectdojo/templates/django-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: defectdojo
  labels:
    defectdojo.org/component: django
    app.kubernetes.io/name: defectdojo
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: defectdojo-1.6.143
spec:
  tls:
  - hosts:
    - defectdojo.default.minikube.local
    secretName: defectdojo-tls
  rules:
  - host: defectdojo.default.minikube.local
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: defectdojo-django
              port: 
                number: 80
---
# Source: defectdojo/templates/sa.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: defectdojo
  labels:
    app.kubernetes.io/name: defectdojo
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: defectdojo-1.6.143
  annotations:
    helm.sh/resource-policy: keep
    helm.sh/hook: "pre-install"
    helm.sh/hook-delete-policy: "before-hook-creation"
---
# Source: defectdojo/templates/secret-rabbitmq.yaml
apiVersion: v1
kind: Secret
metadata:
  name: defectdojo-rabbitmq-specific
  labels:
    app.kubernetes.io/name: defectdojo
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: defectdojo-1.6.143
  annotations:
    helm.sh/resource-policy: keep
    helm.sh/hook: "pre-install"
    helm.sh/hook-delete-policy: "before-hook-creation"
type: Opaque
data:
  rabbitmq-password: "Y1l0OUlkaVV2Rg=="
  rabbitmq-erlang-cookie: "VzBSZGtFTHpEWlJKY01Nd3BJUmQ0MTU3ZUNha09PSVo="
---
# Source: defectdojo/templates/secret-redis.yaml
apiVersion: v1
kind: Secret
metadata:
  name: defectdojo-redis-specific
  labels:
    app.kubernetes.io/name: defectdojo
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: defectdojo-1.6.143
  annotations:
    helm.sh/resource-policy: keep
    helm.sh/hook: "pre-install"
    helm.sh/hook-delete-policy: "before-hook-creation"
type: Opaque
data:
  redis-password: "QlVoQlZ1ME5PRw=="
---
# Source: defectdojo/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: defectdojo
  labels:
    app.kubernetes.io/name: defectdojo
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: defectdojo-1.6.143
  annotations:
    helm.sh/resource-policy: keep
    helm.sh/hook: "pre-install"
    helm.sh/hook-delete-policy: "before-hook-creation"
type: Opaque
data:
  DD_ADMIN_PASSWORD: "NUw5TkEzSFdGb2VmQUN5Sm01U1pVMw=="
  DD_SECRET_KEY: "NWlGMnJRbXVMZmcybGdoUEJvYjRBbFBxTmNqSTVTMHZCN2lvTzgyMDB3cDVXYzJwWGtlNDJldjdJcHFneHd1N0p4NEVFQThoU1JUc1pFTnRVU0JlaVlpZGVybWRKUEtBUEVadlNHdzQzTHBzOHNIZ1FaMTBueExWb2tVcVRGbW8="
  DD_CREDENTIAL_AES_256_KEY: "Y1BCcXlFeHVWaFB4cjZJSDc5bllFMENiUDZVUXRIS3czWTRpTVRXblVOTDI4SHNOVEk3anRCMjBQWG5CZHlVUWZKZHh0UjFJeXBUUENyT0hKNEsweDJHYmd6RFVyN2NrYjh3T2dMSDVzZE9PRldEUG93c1hrS3pINVhBN0R6RHY="
  METRICS_HTTP_AUTH_PASSWORD: "blNuZFNaOUdFRWNnamdIZDdMbDRoSEtoMHpGVkJiRjg="
---
# Source: defectdojo/templates/tests/unit-tests.yaml
apiVersion: v1
kind: Pod
metadata:
  name: defectdojo-unit-tests
  labels:
    app.kubernetes.io/name: defectdojo
    helm.sh/chart: defectdojo-1.6.143
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: test-success
spec:
  serviceAccountName: defectdojo
  containers:
    - name: unit-tests
      image: 'defectdojo/defectdojo-django:latest'
      imagePullPolicy: Always
      securityContext:
        runAsUser: 1001
      command: ['/entrypoint-unit-tests.sh']
      envFrom:
        - configMapRef:
            name: defectdojo
      env:
        - name: DD_DATABASE_USER
          value: psqladmin
        - name: DD_CELERY_BROKER_PASSWORD
          valueFrom:
            secretKeyRef:
              # Use broker chart secret
              # name: defectdojo-rabbitmq
              # Use secret handled outside of the chart
              name: defectdojo-rabbitmq-specific
              key: rabbitmq-password
        - name: DD_DEBUG
          value: 'True'
        - name: DD_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: defectdojo
              key: DD_SECRET_KEY
        - name: DD_CREDENTIAL_AES_256_KEY
          valueFrom:
            secretKeyRef:
              name: defectdojo
              key: DD_CREDENTIAL_AES_256_KEY
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 100m
          memory: 128Mi
  restartPolicy: Never
---
# Source: defectdojo/templates/initializer-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: defectdojo-initializer-2024-08-05-15-20
  labels:
    defectdojo.org/component: initializer
    app.kubernetes.io/name: defectdojo
    app.kubernetes.io/instance: defectdojo
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: defectdojo-1.6.143
  annotations:
    helm.sh/hook: post-install,post-upgrade
spec:
  ttlSecondsAfterFinished: 60
  template:
    metadata:
      labels:
        defectdojo.org/component: initializer
        app.kubernetes.io/name: defectdojo
        app.kubernetes.io/instance: defectdojo
      annotations:
    spec:
      serviceAccountName: defectdojo
      volumes:
      containers:
      - name: initializer
        image: "defectdojo/defectdojo-django:latest"
        imagePullPolicy: Always
        securityContext:
          runAsUser: 1001
        volumeMounts:
        command:
          - /entrypoint-initializer.sh
        envFrom:
        - configMapRef:
            name: defectdojo
        - secretRef:
            name: defectdojo
        resources:
          limits:
            cpu: 2000m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
      restartPolicy: Never
  backoffLimit: 1